name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            ```bash
            git clone https://github.com/devcommand/devcommand.git
            cd devcommand
            git checkout ${{ steps.version.outputs.version }}
            pnpm install
            ```
            
            ## Docker Images
            - Backend: `ghcr.io/devcommand/backend:${{ steps.version.outputs.version }}`
            - Frontend: `ghcr.io/devcommand/frontend:${{ steps.version.outputs.version }}`
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile.${{ matrix.service }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:${{ needs.create-release.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [create-release, build-docker]
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy backend
        uses: ./.github/actions/deploy-backend
        with:
          environment: production
          version: ${{ needs.create-release.outputs.version }}
          cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
      - name: Deploy frontend
        uses: ./.github/actions/deploy-frontend
        with:
          environment: production
          version: ${{ needs.create-release.outputs.version }}
          vercel_token: ${{ secrets.VERCEL_TOKEN }}
      
      - name: Update release notes
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const version = '${{ needs.create-release.outputs.version }}';
            
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: '${{ needs.create-release.outputs.release_id }}',
              body: (await github.rest.repos.getRelease({
                owner,
                repo,
                release_id: '${{ needs.create-release.outputs.release_id }}'
              })).data.body + '\n\n## Deployment Status\nâœ… Successfully deployed to production'
            });