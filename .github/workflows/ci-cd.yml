# Ref: CLAUDE.md Terminal 4 Phase 4 - GitHub Actions CI/CD Pipeline
# Thermonuclear CI/CD for ProtoThrive

name: CI/CD

on:
  push:
    branches: [main, dev]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [main, dev]

env:
  NODE_VERSION: '20'
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

jobs:
  # Lint job - Check code quality
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          echo "Thermonuclear Init: Installing dependencies"
          npm ci
          npm run install-workspaces

      - name: Run ESLint
        run: |
          echo "Thermonuclear Validation: Running lint checks"
          npm run lint
          echo "Thermonuclear Checkpoint: Lint completed"

  # Test job - Run unit and integration tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          echo "Thermonuclear Init: Installing test dependencies"
          npm ci
          npm run install-workspaces

      - name: Run unit tests
        run: |
          echo "Thermonuclear Validation: Running tests"
          npm test
          echo "Thermonuclear Checkpoint: Tests completed"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # Build job - Compile and prepare artifacts
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          echo "Thermonuclear Init: Installing build dependencies"
          npm ci
          npm run install-workspaces

      - name: Build application
        run: |
          echo "Thermonuclear Build: Compiling application"
          npm run build
          echo "Thermonuclear Checkpoint: Build completed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            .next/
            build/
          retention-days: 7

  # Deploy to staging - For dev branch
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.protothrive.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Wrangler
        run: |
          echo "Thermonuclear Init: Installing Cloudflare Wrangler"
          npm install -g wrangler

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Cloudflare Workers (Staging)
        working-directory: backend
        run: |
          echo "Thermonuclear Deploy: Pushing backend to staging environment"
          wrangler deploy --env staging
          echo "Thermonuclear Checkpoint: Backend staging deployment completed"

      - name: Build Frontend for Staging
        working-directory: frontend
        run: |
          echo "Thermonuclear Build: Building frontend for staging"
          npm run build
          echo "Thermonuclear Checkpoint: Frontend build completed"

      - name: Deploy to Cloudflare Pages (Staging)
        working-directory: frontend
        run: |
          echo "Thermonuclear Deploy: Pushing frontend to staging environment"
          wrangler pages deploy out --project-name=protothrive-frontend --branch=staging
          echo "Thermonuclear Checkpoint: Frontend staging deployment completed"

  # Deploy to production - For version tags
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    environment:
      name: production
      url: https://protothrive.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Wrangler
        run: |
          echo "Thermonuclear Init: Installing Cloudflare Wrangler"
          npm install -g wrangler

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Cloudflare Workers (Production)
        working-directory: backend
        run: |
          echo "Thermonuclear Deploy: Pushing backend to production environment"
          wrangler deploy --env production
          echo "Thermonuclear Checkpoint: Backend production deployment completed"

      - name: Build Frontend for Production
        working-directory: frontend
        run: |
          echo "Thermonuclear Build: Building frontend for production"
          npm run build
          echo "Thermonuclear Checkpoint: Frontend build completed"

      - name: Deploy to Cloudflare Pages (Production)
        working-directory: frontend
        run: |
          echo "Thermonuclear Deploy: Pushing frontend to production environment"
          wrangler pages deploy out --project-name=protothrive-frontend --branch=main
          echo "Thermonuclear Checkpoint: Frontend production deployment completed"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Thermonuclear Release ðŸš€
            
            ### Changes in this release:
            - Automated deployment from CI/CD pipeline
            - All tests passed
            - Thrive Score optimized
            
            ### Deployment Status:
            - âœ… Lint checks passed
            - âœ… Tests passed
            - âœ… Build successful
            - âœ… Deployed to production
          draft: false
          prerelease: false